<resources>
    <string name="app_name">Neuron Seeking Learn</string>
    <color name="buttom">#FF453A</color>
    <string name="open_string">Open</string>
    <string name="close_string">Close</string>
    <string name="road_maps">Road Maps</string>
    <string name="chat_to_choose_my_track">Chat to choose my track</string>
    <string name="search_about_a_question">Search about a question</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="home">Home</string>
    <string name="sign_in">Sign In</string>

    <string name="FrontEnd">
    -Internet
How does the internet work?
What is HTTP?
What is Domain Name?
What is hosting?
DNS and how it works?
Browsers ond how they work?
     -HTML
Learn the basics
Writing Semantic HTML
Forms and Validations
Accessibility
SEO Basics
       -CSS
Learn the basics
Making Layouts
Responsive Design
-JavaScript
Learn the Basics
Learn DOM Manipulation
Fetch API/Ajax (XHR)


       -VCS Hosting
GitHub
GitLab
Bitbucket
     -Version Control Systems
Git
     -Package Managers
Npm
Pnpm
Yarn
       -Pick a Framework
Angular
Vuejs
React
Svelte
Solid JS
Qwik
         -Writing CSS
Tailwind
Radix Ul
Shadcn UI
         -CSS Architecture
BEM

          -CSS Preprocessors
Sass
PostCSS
           -Build Tools
Module Bundlers
*vite
*EsBuild
*webpack
*rollup
*parcel
Task Runners
*npm scripts
Linters and Formatters
*prettier
*ESLint
          -Testing your Apps
ViTest
Jest
PlayRight
Cypress
        -Authentication Strategies
JWT, CAuth, SSC, Basic Auth, Session Auth etc
         -Web Security Basics
HTML Templates
Custom Elements
Shadow DOM
          -Type Checkers
TypeScript
         -Server Side Rendering (SSR)
Angular
* Universal
Vue.js
* Nuxt.js
React
* Next.js
* Remix
Svelte
* Svelte Kit
         - GraphQL
Apollo
Relay Modern
        - Static Site Generators
Vuepress
Astro
Jekyll
Elevent
Hugo
Next.js
Nuxt.js
Remix

    </string>

    
    <string name="ASP.NET_CORE">
        -Learn the Basics of C#
C#
.NET
.NET CLI
        -General Development Skills
Git Version Control
Azure DevOps Services
GitHub, GitLab, BitBucket
HTTP/HTTPS Protocol
DataStructures and Algorithma
         -Database Fundamentals
Database Design Basics
SQL Basics
Stored Procedures
Constraints
Triggers
        -ASP.NET Core Basics
MVC
REST
Rozor Poges
Razor Components
Middlewares
Filters and Attributes
App Settinge and Config
         -ORM
Entity Framework Core
*Framework Basice
*Code First Migrations
*Change Tracker API
*Lazy Eager, Explicit Loading
Dopper
RepoDB
NHibernate
         -Dependency Injection
Scrutor
Life Cycles
*Scoped
*Transient 
*Singleton
DI Containers
*Microsoft Extensions. DependencyInjection
*AutoFac
*Ninject
*Castle Windsor
*Simple Injector
          -Caching
Memory Cache
Entity Framework 2nd Level Cache
Distributed Cache
*Memcached
*Redis
         -Stack Exchange Redis
         -EasyCaching
          -Databases
Search Engines
*Elastic Search
*Solr
*Sphinx
Cloud
*DynamoDB
*CosmosDB
Relational
*SQL Server
*PostgreSQL
*MariaDB
*MySQL
NoSQL
*Redis
*Cassandro
*MongoDB
*RovenDB
*LiteDB
*CouchDB
           -Log Frameworks
Serilog
NLog
Log Management System
*ELK Stack
*Sentry.io
*Datadog
*loggly.com
*elmah.io
          -API Clients and Communication
GRPC
GraphQL
*GraphQL-dotnet
*HotChocolate
          -Real-Time Communication
Web Sockets
SignalR Core
            -Object Mapping
AutoMopper
Express Mapper
Agile Mapper
Mapster
             -Task Scheduling
Native Background Service
Quartz
Caravel

    </string>


    <string name="Android">
        Pick a Language:
              *Kotlin
              *Java
The Fundamentals:
            *Development IDE
           *Basics of Kotlin
           *Basics of OOP
          *DataStructures and Algorithms
          *What is and how to use Gradle?
          *Create a basic Hello World App
Version Control Systems:
          *Git
          *GitHub
          *BitBucket
          *GitLab

App Components:
        *Activity
     -Activity Lifecycle
     -State Changes
      -Tasks and Backstack
        * Services
        * Content Provider
        * Broadcast Receiver
        *Intent
      -Implicit Intents
      -Explicit Intents
      -Intent Filters

Interface and Navigation: 
        *Jetpack Compose
        -App Shortcuts
        -Navigation Components
 (Layouts)
                   *Frame
                   *Linear
                   *Relative
                   *Constraint
                   *RecycleView
(Elements)
        *Fragments      
        *TextView
        *Dialogs
        *EditText
        *Toast
        *Buttons
        *Bottom Sheet
        *ImageView
        *Drawer
        *ListView
        *Animations
        *Tabs
Architecture and Design Patterns:
        *Repository Pattern 
        *RxKotlin
        *Builder Pattern   
        *Flow
        * Factory Pattern     
        *RxJava                                    
        *Observer Pattern    
        *Koin
            -LiveData
         *Dependency Injection 
        *Hilt 
             -Dagger
          *Kodein       
          *MVI
          *MVVM             
          *MVP
          *MVC
Storage:
      *DataStore
       *Room Database
        *Room Database

Network:
        *Retrofit
        *OkHttp
        *Apollo-Android
Asynchronism:
              *Coroutines
               *Threads
                *RxKotlin
                *RxJava
                *WorkManager
Common Services:
              *Google Play Services
              *Google AdMob       
              *Google Maps
              *Firebase
        -FireStore    
        -Cloud Messaging
        -Remote Config  
        -Crashlytics
        - Authentication
Linting:
       *Ktlint
        *Detekt
Debugging:
          *Timber
          *Leak Canary
          *Chucker
          *Jetpack Benchmark
Testing:
       *Junit
        *Espresso
Distribution:
       *Google Playstore
        *Firebase Distribution
        *Signed APK

    </string>


    <string name="UxDesign">
        Understanding Human Decision Making:(Buzzwords to Lookout for)
          *Nudge Theory
          *Persuasive Technology
          *Behavior Design
          *Behavioral Science
          *Behavioral Economics
(Framworks)
        *BJ Fogg’s Behavior Model
        *Stephen Wendell’s CREATE Action Funnel
        *Spectrum of Thinking Interventions
        *Dual Process Theory
        
-Behavior Change Strategies:
  (Classifying Behavior)
            *BJ Fogg’s Behavior Grid
  (Making Users Addicted)
           *Nir Eyal’s Hook Model
           *Cue Routine Reward Model
  (Changing Users behavior)
Support Conscious Action:
           *Help User think about Their Action
           *Educate and Encourage User
            *Make it Incidental
            *Automate the Act of Repetition
Cheating:
        *Defaulting
Make or Change Habbits:
        
(New Behavior)
          *Help User Avoiding the Cue
          *Replace the Routine
          *Use Consciousness to Interfere
         *Mindfulness to Avoid Acting on the Cue
         *Crowd Out Old Habit with New Behavior
Understanding the Product:
        
(Clarify Product)
          *Target Outcome
          *Target Actor
          *Target Action

(Define Target Users)
            *Create User Personas
        
(Business Model)
            *Business Model Canvas
            *Lean Canvas
        
(New Business Model)
           *Business Model Inspirator
           *Competitor Analysis
           *Five Forces Model
           *SWOT Analysis
        
Conceptual Design:
(Create Product Backlog)
          *User Storie

(Things to Lookout for)
        
  *In general, Keep it Short and Simple
        
  *Make it Easy to Understand, Easy to Complete
        
  *Make Progress Visible to User
        
  *Make Progress Meaningful in order to Reward User
        
  *Make Successful Completion Clearly Visible
        
(Deliverables)
        
*Customer Experience Map by Mel Edwards
        
*Simple Flowchart
        
*Event-Driven Process Chain Model (EPC)
        
*Business Process Model and Notation (BPMN)

ProtoTyping:
        
*Good Layout Rules
(Wireframing)
*Figma
*Adobe XD
*Sketch
*Balsamiq
        
(Ux Patterns)
        
(When Attention is Fleeting and Scarce)
        
*Call to Action
*Status Reports
*How-to-Tips
*Simple Reminders and Planning Prompts
        
(When you have many opportunities to Influence User)
        
*Decision-Making Support
*Behavior Change Games
*Planners
*Gamification
*Social Sharing
*Reminders
*Tutorials
*Goal Trackers
        
UX Best Practices:
        
(Getting Users Attention)
        
*Tell User What the Action is and Ask for it
*Make it Clear, Where to Act
*Clear the Page of Distractions
        
(Get a Favorable Conscious Evaluation)
        
*Prime User-Relevant Associations
*Leverage Loss Aversion
*Use Peer Comparisons
*Use Competition
*Avoid Cognitive Overhead
*Avoid Choice Overload
*Avoid Direct Payments
        
(Creating Urgency to Act Now)
        
*Frame Text to Avoid Temporal Myopia
*Remind of Prior Commitment to Act
*Make Commitment to Friends
*Make Reward Scarce
        
(Getting Positive Intuitive Reaction)
        
               *Make UI Professional and Beautiful
               *Deploy Social Proof
               *Deploy Strong Authority on Subject
               *Be Authentic and Personal
        
(Make sure Users can Easily do it)
        
              *Elicit Implementation Intentions
              *Default Everything
              *Lessen the Burden of Action/Info.
              *Deploy Peer Comparisons

Measuring the Impact:
(Testing)
           *Incremental A/B Testing
           *Multivariate Testing
               -Gather Lessons Learned
    </string>


    <string name="Flutter">
        1-Basic of dart:
•	Function
•	Operators
•	Control flow statement
•	Variables
        
        2-set up development environment:
•	Flutter CLI
•	Vs code
•	Android studio
•	IDEs
•	FVM
        
        3-Widgets:
•	Stateless
•	Stay led
•	Material
•	Cupertino
        
         4-Working with Assets:
•	Fonts
•	Images
•	Other file types
        
        5-version control systems:
•	GIT
        6-Repohosting services:
•	GIT Hub
        
        7-Design principles:
•	Design patterns
•	OOP
•	Dependency Injection
        
        8-Package manager:
•	Pub .dev
•	Flutter pub/dart pub
        
      9-Storage:
•	SQL Lite
•	Shared preferences
•	Fire base/fire store
        
      10-Working with APIS:
•	JSON serialize/Dese ria I z e
•	Web SOKETS
•	Graph QL
•	RESTFUL APIS
        
        11-Advanced Dart:
•	Core libraries
•	Lists
•	Lambdas
•	Functional programing
•	Streams/function
        
        12-state management:
•	River pod
•	Bloc
•	Provider 
        
        13-Reactive programming:
•	RX Dart
        
        14-Animations:
•	Curved
•	Animation controller
•	Hero/opacity
•	Animated Builder
•	Animated widget
        
         15-Testing:
•	Unit testing
•	Widget testing
•	TDD/BDD
•	Integration testing
        
        16-CI/CD:
•	Fast lane
•	Code magic
•	BITRISE
•	GIT Hub Action
        
        17-Devtools:
•	Flutter inspector
•	Flutter outline
•	Memory all OCATION
        
        18-Flutter internals:
•	Render objects
•	3 trees
•	Immutability
        
        19-Analytics:
•	Fire base Analytics
•	Google Analytics
•	SAGMENT
•	Mix PANAL
        
         20-Deployment:
•	App store
•	Guide lines and protocols
•	Play store
    </string>


    <string name="AI">
        1-Mathmatic:
•	Learn Algebra
•	Calculus
•	Mathematical Analysis
•	Differential Calculus

2-Statistics:
•	Statistics, CLT
•	Hypothesis Testing
•	Probability and Sampling
•	AB Testing
•	Increasing Test Sensitivity
•	Ratio Metrics

3-Econometrics:
•	Econometrics Pre-requisites
•	Regressions
•	Time series
•	Fitting Distributions

4-Coding:
•	Python
•	Data Structures and Algorithms
•	SQL

5-Machine learning:
•	Classic/Advanced ML

6-Deep Learning:
•	Fully Connected NN
•	CNN
•	RNN
•	LSTM
•	Transformers
•	Transfer Learning

7-MlOps
•	Deployment models
•	CI/CD

    </string>

</resources>